---
fullname: Bertrand
shortname: bertrand
organization: coq-community
community: true
action: true
doi: 10.1007/10930755_20

synopsis: Correctness of Knuth's algorithm for prime numbers

description: |
  A proof of correctness of the algorithm for computing prime
  numbers as described in "The Art of Computer Programming:
  Fundamental Algorithms" by Knuth, pp. 147-149, and an
  application using Bertrand's postulate.

publications:
- pub_url: https://link.springer.com/chapter/10.1007%2F10930755_20
  pub_title: "Proving Pearl: Knuth's Algorithm for Prime Numbers"
  pub_doi: 10.1007/10930755_20

authors:
- name: Laurent Théry
  initial: true

maintainers:
- name: Laurent Théry
  nickname: thery

license:
  fullname: GNU Lesser General Public License v2.1 or later
  identifier: LGPL-2.1-or-later

supported_coq_versions:
  text: Coq 8.8 or later
  opam: '{(>= "8.8" & < "8.13~") | (= "dev")}'

tested_coq_nix_versions:
- version_or_url: https://github.com/coq/coq-on-cachix/tarball/master

tested_coq_opam_versions:
- version: 'dev'
- version: '8.12'
- version: '8.11'
- version: '8.10'
- version: '8.9'
- version: '8.8'

namespace: Bertrand

keywords:
- name: Knuth's algorithm
- name: prime numbers
- name: Bertrand's postulate

categories:
- name: Mathematics/Arithmetic and Number Theory/Number theory
- name: Computer Science/Decision Procedures and Certified Algorithms/Correctness proofs based on external tools
- name: Miscellaneous/Extracted Programs/Arithmetic

documentation: |
  ## Contents

  This project consists of:

  - A Coq proof of Bertrand's postulate: there always exists a prime between
    n and 2n for n greater than 2 (`Bertrand.v`).
  - A proof of correctness of an implementation of the algorithm for computing primes
    described in "The Art of Computer Programming: Fundamental Algorithms" by Knuth,
    pages 147-149. The proof uses the [Why3 tool](http://why3.lri.fr) to generate
    verification conditions for the WhyML program that implements the algorithm.
    These verification conditions can then be discharged by Coq and the
    [Alt-Ergo](https://alt-ergo.ocamlpro.com) prover.
  - A little program in OCaml that generates a partition of 1..2n in pairs (i,j)
    such that i+j is always prime (`run_partition.ml`). The proof of correctness
    of this program is a direct consequence of Bertrand's postulate (`Partition.v`).
    This nice application of Bertrand's postulate was suggested by Gérard Huet.

  ## Checking WhyML program correctness

  To check the correctness of the WhyML program, first make sure
  the following packages are installed (in addition to Coq 8.12.1 and
  the proof of Bertrand's postulate):

  - [Alt-Ergo 2.3.3](https://alt-ergo.ocamlpro.com)
  - [Why3 1.3.3](http://why3.lri.fr) and its Coq library

  These packages can be installed via OPAM using the following command:
  ```
  opam install alt-ergo.2.3.3 why3.1.3.3 why3-coq
  ```
  Then, the Why3 proof can be replayed by running
  ```
  make why
  ```
---
