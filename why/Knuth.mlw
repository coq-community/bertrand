module Knuth

use int.Int
use int.EuclideanDivision
use number.Parity
use number.Divisibility
use number.Prime
use ref.Ref
use array.Array

(* Square root  *)
val sqr (n : int) : int
  requires { 0 <= n }
  ensures { result * result <= n /\ n < (result + 1) * (result + 1)}

(* convert a boolean into an int *)
function one (b : bool) : int = if b then 1 else 0

predicate in_array (v : 'a) (a : array 'a) (f t : int) =
  exists x : int. f <= x < t /\ v = a[x]

(** Knuth's program to compute the n first prime numbers *)
let prime (a : array int) (n : int) =
requires { n > 0 /\ a.length = n }
ensures { forall k : int. 0 <= k < n -> prime a[k] }
ensures { forall k : int. forall j:int. 0 <= k < j < n -> a[k] < a[j] }
ensures { forall k : int. 
          0 <= k <= a[n-1] /\ prime k -> in_array k a 0 n }
  let m = ref 3 in
  let i = ref 1 in
  let j = ref 0 in
  let s = ref 0 in
  let b = ref true in 
  begin
  a[0] <- 2;
  while (!i < n) do 
    invariant { a[!i - 1] < !m < 2 * a[!i - 1] }
    invariant { 0 < !i <= n } 
    invariant { odd !m }
    invariant { forall k:int. a[!i - 1] < k < !m -> not(prime k) }
    invariant { forall k : int. 0 <= k < !i -> prime a[k] } 
    invariant { forall k : int. forall j : int.
                 0 <= k < j < !i -> a[k] < a[j] }
    invariant { forall k:int.
         (0 <= k <= a[!i - 1] /\ prime k) -> in_array k a 0 !i}
    invariant {a.length = n}
    variant { n - !i, 2 * a[!i - 1] - !m }
    b:= true;
    s := sqr !m;
    j := 0; 
    while (!b && a[!j] <= !s) do 
      invariant {
        if !b then
          (forall k:int. 0 <= k < !j -> not (divides a[k] !m))
        else  divides a[!j] !m }
      invariant { 0 <= !j < !i }
      variant { one !b + !i - !j }
      if mod !m a[!j] = 0 then
          b:= false 
      else  
          j := !j + 1
    done 
    ;
    if (!b) then
      begin     
        a[!i] <- !m;
        i := !i + 1
      end;
    m := !m + 2
 done

end
end


